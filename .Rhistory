movie_years <- c()
movie_durations <- c()
movie_ratings <- c()
movie_votes <- c()
for(url in url_vector){
HTML = read_html(url)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
duration_trash <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration_trash <- html_text(duration_trash)
duration <- c()
for (string in duration_trash){
start_index <- 5
string_length <- str_length(string)
if(grepl("m", string, fixed = TRUE)){
end_index <- regexpr("m", string)
result <- substr(string, start_index, end_index)
duration <- append(duration,result)
}
else{
end_index <- regexpr("h", string)
result <- substr(string, start_index, end_index)
duration <- append(duration, result)
}
}
hour_duration <- str_split(duration, " ")
hour_duration <- sapply(hour_duration, function(x) ifelse(grepl("h", x[1], fixed = TRUE), x[1], 0))
hour_duration <- sub("h", "", hour_duration)
hour_duration <- as.numeric(hour_duration)
hour_duration <- hour_duration * 60
minute_duration <- str_split(duration, " ")
minute_duration <- sapply(minute_duration, function(x) ifelse(length(x) >= 2, x[2], ifelse(grepl("m", x, fixed = TRUE), x[1], ifelse(grepl("m", x[1], fixed = TRUE), x[1],0))))
minute_duration <- sub("m", "", minute_duration)
minute_duration <- as.numeric(minute_duration)
rating <- HTML %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
vote <- HTML %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
movie_titles <- append(movie_titles,title_names)
movie_years <- append(movie_years, year)
movie_durations <- append(movie_durations, hour_duration + minute_duration)
movie_ratings <- append(movie_ratings, rating)
movie_votes <- append(movie_votes, vote)
}
movies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)
kable(head(movies_df,10), caption = "Movies Dataframe")
library(rvest)
library(httr)
library(stringr)
library(kableExtra)
install.packages("kableExtra")
library(rvest)
library(httr)
library(stringr)
library(kableExtra)
# Temel URL
url_base <- "https://www.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
# İki farklı URL oluştur
url_vector <- c(
paste0(url_base, "&release_date=2010-01-01,2023-12-31"),
paste0(url_base, "&release_date=,2009-12-31")
)
# Boş veri çerçeveleri oluştur
movies_df <- data.frame(
movie_titles = character(),
movie_years = numeric(),
movie_durations = numeric(),
movie_ratings = numeric(),
movie_votes = numeric(),
stringsAsFactors = FALSE
)
# URL'leri döngüye al
for (url in url_vector) {
HTML <- read_html(url)
# Filmlerin adları
title_names <- HTML %>%
html_nodes('.ipc-title__text') %>%
html_text() %>%
str_split(" ", n = 2) %>%
lapply(function(x) x[2]) %>%
unlist()
# Yıl ve Süre bilgileri
metadata_nodes <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text()
# Yıl
year <- as.numeric(substr(metadata_nodes[1], 1, 4))
# Süre
duration_str <- str_extract(metadata_nodes[2], "\\d+h \\d+m")
duration <- as.numeric(str_replace_all(duration_str, c("h" = " * 60 +", "m" = "")))
# IMDb Puanı
rating <- HTML %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Oy Sayısı
vote <- HTML %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
str_replace("Votes", "") %>%
str_replace(",", "") %>%
as.numeric()
# Verileri birleştir
movies_df <- rbind(movies_df, data.frame(
movie_titles = title_names,
movie_years = year,
movie_durations = duration,
movie_ratings = rating,
movie_votes = vote,
stringsAsFactors = FALSE
))
}
library(rvest)
library(httr)
library(stringr)
library(kableExtra)
# Temel URL
url_base <- "https://www.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
# İki farklı URL oluştur
url_vector <- c(
paste0(url_base, "&release_date=2010-01-01,2023-12-31"),
paste0(url_base, "&release_date=,2009-12-31")
)
# Boş veri çerçeveleri oluştur
movies_df <- data.frame(
movie_titles = character(),
movie_years = numeric(),
movie_durations = numeric(),
movie_ratings = numeric(),
movie_votes = numeric(),
stringsAsFactors = FALSE
)
# URL'leri döngüye al
for (url in url_vector) {
HTML <- read_html(url)
# Filmlerin adları
title_names <- HTML %>%
html_nodes('.ipc-title__text') %>%
html_text() %>%
str_split(" ", n = 2) %>%
lapply(function(x) x[2]) %>%
unlist()
# Yıl ve Süre bilgileri
metadata_nodes <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text()
# Yıl
year <- as.numeric(substr(metadata_nodes[1], 1, 4))
# Süre
duration_str <- str_extract(metadata_nodes[2], "\\d+h \\d+m")
duration <- as.numeric(str_replace_all(duration_str, c("h" = " * 60 +", "m" = "")))
# IMDb Puanı
rating <- HTML %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Oy Sayısı
vote <- HTML %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
str_replace("Votes", "") %>%
str_replace(",", "") %>%
as.numeric()
# Verileri birleştir
movies_df <- rbind(movies_df, data.frame(
movie_titles = title_names,
movie_years = year,
movie_durations = duration,
movie_ratings = rating,
movie_votes = vote,
stringsAsFactors = FALSE
))
}
library(rvest)
library(httr)
library(stringr)
library(kableExtra)
# Temel URL
url_base <- "https://www.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
# İki farklı URL oluştur
url_vector <- c(
paste0(url_base, "&release_date=2010-01-01,2023-12-31"),
paste0(url_base, "&release_date=,2009-12-31")
)
# Boş veri çerçeveleri oluştur
movies_df <- data.frame(
movie_titles = character(),
movie_years = numeric(),
movie_durations = numeric(),
movie_ratings = numeric(),
movie_votes = numeric(),
stringsAsFactors = FALSE
)
# URL'leri döngüye al
for (url in url_vector) {
HTML <- read_html(url)
# Filmlerin adları
title_names <- HTML %>%
html_nodes('.ipc-title__text') %>%
html_text() %>%
str_split(" ", n = 2) %>%
lapply(function(x) x[2]) %>%
unlist()
# Yıl ve Süre bilgileri
metadata_nodes <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text()
# Uzunluk kontrolü ekleniyor
if (length(title_names) == length(metadata_nodes) && length(title_names) > 0) {
# Yıl
year <- as.numeric(substr(metadata_nodes[1], 1, 4))
# Süre
duration_str <- str_extract(metadata_nodes[2], "\\d+h \\d+m")
duration <- as.numeric(str_replace_all(duration_str, c("h" = " * 60 +", "m" = "")))
# IMDb Puanı
rating <- HTML %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Oy Sayısı
vote <- HTML %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
str_replace("Votes", "") %>%
str_replace(",", "") %>%
as.numeric()
# Verileri birleştir
movies_df <- rbind(movies_df, data.frame(
movie_titles = title_names,
movie_years = year,
movie_durations = duration,
movie_ratings = rating,
movie_votes = vote,
stringsAsFactors = FALSE
))
} else {
print("Veri alınırken bir hata oluştu.")
}
}
# Güzel bir tablo oluştur
kable(movies_df,
caption = "Turkish Movies from IMDb",
col.names = c("Title", "Year", "Duration (min)", "IMDb Rating", "Votes"),
align = c("l", "c", "c", "c", "c"),
format = "html") %>%
kable_styling(full_width = FALSE)
summary(movies_df)
summary(movies_df)
install.packages("skimr")
library(skimr)
movies_df %>%
skim()
str(movies_df)
movie_titles <- c()
movie_years <- c()
movie_durations <- c()
movie_ratings <- c()
movie_votes <- c()
for(url in url_vector){
HTML = read_html(url)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
duration_trash <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration_trash <- html_text(duration_trash)
duration <- c()
for (string in duration_trash){
start_index <- 5
string_length <- str_length(string)
if(grepl("m", string, fixed = TRUE)){
end_index <- regexpr("m", string)
result <- substr(string, start_index, end_index)
duration <- append(duration,result)
}
else{
end_index <- regexpr("h", string)
result <- substr(string, start_index, end_index)
duration <- append(duration, result)
}
}
hour_duration <- str_split(duration, " ")
hour_duration <- sapply(hour_duration, function(x) ifelse(grepl("h", x[1], fixed = TRUE), x[1], 0))
hour_duration <- sub("h", "", hour_duration)
hour_duration <- as.numeric(hour_duration)
hour_duration <- hour_duration * 60
minute_duration <- str_split(duration, " ")
minute_duration <- sapply(minute_duration, function(x) ifelse(length(x) >= 2, x[2], ifelse(grepl("m", x, fixed = TRUE), x[1], ifelse(grepl("m", x[1], fixed = TRUE), x[1],0))))
minute_duration <- sub("m", "", minute_duration)
minute_duration <- as.numeric(minute_duration)
rating <- HTML %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
vote <- HTML %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
movie_titles <- append(movie_titles,title_names)
movie_years <- append(movie_years, year)
movie_durations <- append(movie_durations, hour_duration + minute_duration)
movie_ratings <- append(movie_ratings, rating)
movie_votes <- append(movie_votes, vote)
}
movies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)
kable(head(movies_df,10), caption = "Movies Dataframe")
str(movies_df)
top5_movies <- head(movies_df[order(movies_df$movie_ratings, decreasing = TRUE), ], 5)
View(top5_movies)
View(top5_movies)
top5_movies <- head(movies_df[order(movies_df$movie_ratings, decreasing = TRUE), ], 5)
top5_movies
bottom5_movies <- head(movies_df[order(movies_df$movie_ratings), ], 5)
bottom5_movies <- head(movies_df[order(movies_df$movie_ratings), ], 5)
bottom5_movies
my_movies <- movies_df[movies_df$movie_titles %in% c("Gemide", "Av Mevsimi", "Kaybedenler Kulübü"), ]
my_movies
movies_df$movie_years <- as.factor(movies_df$movie_years)
# Calculate yearly rating averages
rating_avg_by_year <- movies_df %>%
group_by(movie_years) %>%
summarise(avg_rating = mean(movie_ratings),
num_movies = n())
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating")
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust=1)) +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating")
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating")
movies_df$movie_years <- as.factor(movies_df$movie_years)
# Calculate yearly rating averages
rating_avg_by_year <- movies_df %>%
group_by(movie_years) %>%
summarise(avg_rating = mean(movie_ratings),
num_movies = n())
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
movies_df$movie_years <- as.factor(movies_df$movie_years)
# Calculate yearly rating averages
rating_avg_by_year <- movies_df %>%
group_by(movie_years) %>%
summarise(avg_rating = mean(movie_ratings),
num_movies = n())
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
# Calculate yearly rating averages
rating_avg_by_year <- movies_df %>%
group_by(movie_years) %>%
summarise(avg_rating = mean(movie_ratings),
num_movies = n())
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
# Scatter plot of yearly rating averages
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating")
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust=1)) +
labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating")
# Scatter plot of yearly rating averages with rotated year labels
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
geom_point() +
labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Average Rating") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(movies_df, aes(x = movie_votes, y = movie_ratings)) +
geom_point() +
labs(title = "Scatter Plot of Votes vs Ratings",
x = "Number of Votes",
y = "Ratings")
format:
html:
code-fold: true
correlation <- cor(movies_df$movie_votes, movies_df$movie_ratings)
# Print the correlation coefficient
print("Correlation between Votes and Ratings:", correlation, "\n")
# Print the correlation coefficient
cat("Correlation between Votes and Ratings:", correlation, "\n")
# Create a scatter plot
ggplot(movies_df, aes(x = movie_durations, y = movie_ratings)) +
geom_point() +
labs(title = "Scatter Plot of Duration vs Ratings",
x = "Duration (minutes)",
y = "Ratings")
# Print the correlation coefficient
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
```{r}
# Create a scatter plot
ggplot(movies_df, aes(x = movie_durations, y = movie_ratings)) +
geom_point() +
labs(title = "Scatter Plot of Duration vs Ratings",
x = "Duration (minutes)",
y = "Ratings")
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
# Print the correlation coefficient
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
# Print the correlation coefficient
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
# Print the correlation coefficient
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
correlation_duration_rating <- cor(movies_df$movie_durations, movies_df$movie_ratings, use = "complete.obs")
# Print the correlation coefficient
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")
ggplot(movies_df, aes(x = movie_durations, y = movie_ratings)) +
geom_point() +
labs(title = "Scatter Plot of Duration vs Ratings",
x = "Duration (minutes)",
y = "Ratings")
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
# Print the data frame using kable
kable(top1000_df, caption = "Turkish movies in IMDB Top1000 without rating, duration and votes")
