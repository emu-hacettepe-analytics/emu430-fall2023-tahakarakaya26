---
title: "Assignment 2"

format:
  html: 
    code-fold: true
    code-summary: "Show the code"
---

# Assignment 2

*Import Libraries and Data*

```{r, message=FALSE, results='asis'}
library(tidyverse)
library(rvest)
library(stringr)
library(reshape2)
library(ggplot2)
library(knitr)
library(httr)
library(kableExtra)

base_url <- "https://www.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"

url_vector <- c(
  sprintf("%s&release_date=2010-01-01,2023-12-31", base_url),
  sprintf("%s&release_date=,2009-12-31", base_url)
)
```

*Data Cleaning and Creating The Dataframe*

```{r}
movie_titles <- c()
movie_years <- c()
movie_durations <- c()
movie_ratings <- c()
movie_votes <- c()

for(url in url_vector){
  HTML = read_html(url)
  
  title_names <- HTML %>% html_nodes('.ipc-title__text')
  title_names <- html_text(title_names)
  title_names <- tail(head(title_names,-1),-1)
  title_names <- str_split(title_names, " ", n=2)
  title_names <- unlist(lapply(title_names, function(x) {x[2]}))
  
  year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
  year <- html_text(year)
  year <- substr(year, 1, 4)
  year <- as.numeric(year)
  
  duration_trash <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
  duration_trash <- html_text(duration_trash)
  duration <- c()
  
  for (string in duration_trash){
  start_index <- 5
  string_length <- str_length(string)

  if(grepl("m", string, fixed = TRUE)){
    end_index <- regexpr("m", string)
    result <- substr(string, start_index, end_index)
    duration <- append(duration,result)
    }
    
  else{
    end_index <- regexpr("h", string)
    result <- substr(string, start_index, end_index)
    duration <- append(duration, result)
    }
  }
    
  
  hour_duration <- str_split(duration, " ")
  hour_duration <- sapply(hour_duration, function(x) ifelse(grepl("h", x[1], fixed = TRUE), x[1], 0))
  hour_duration <- sub("h", "", hour_duration)
  hour_duration <- as.numeric(hour_duration)
  hour_duration <- hour_duration * 60
  
  minute_duration <- str_split(duration, " ")
  minute_duration <- sapply(minute_duration, function(x) ifelse(length(x) >= 2, x[2], ifelse(grepl("m", x, fixed = TRUE), x[1], ifelse(grepl("m", x[1], fixed = TRUE), x[1],0))))
  minute_duration <- sub("m", "", minute_duration)
  minute_duration <- as.numeric(minute_duration)
  
  rating <- HTML %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
  rating <- html_text(rating)
  rating <- substr(rating, 1, 3)
  rating <- as.numeric(rating)
  
  vote <- HTML %>% html_nodes(".sc-53c98e73-0.kRnqtn")
  vote <- html_text(vote)
  vote <- sub("Votes", "" ,vote)
  vote <- sub(",", "", vote)
  vote <- as.numeric(vote)
  
  movie_titles <- append(movie_titles,title_names)
  movie_years <- append(movie_years, year)
  movie_durations <- append(movie_durations, hour_duration + minute_duration)
  movie_ratings <- append(movie_ratings, rating)
  movie_votes <- append(movie_votes, vote)
  
}

movies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)
kable(head(movies_df,10), caption = "Movies Dataframe")
```

*Examine the Structure of 'movies_df'*

```{r}
str(movies_df)
```

*Top 5 movies*

```{r}
top5_movies <- head(movies_df[order(movies_df$movie_ratings, decreasing = TRUE), ], 5)
top5_movies
```

To begin with, I saw every one of them except the "Süt Kardeşler", and I think the ratings of Hababam Class film series and "Tosun Paşa" are very accurate. "Hababam Class" was a heartfelt and genuine film series, particularly in the way it represented the cultural norms of the time and its lovable character. Regarding "Fundamentals" I think it was among Cem Yılmaz's greatest pieces, but after seeing some of his more recent works, I don't feel a strong connection to the earlier ones. I disagree that it should be in second place because of this.

*Worst 5 movies*

```{r}
bottom5_movies <- head(movies_df[order(movies_df$movie_ratings), ], 5)
bottom5_movies
```

In fact, I haven't watched any of them, and some of them I've never even heard of. However, even if I have to push myself, I'm considering seeing "Cumali Ceber: May God Take You" after this assignment is done :))

*My best movies*

```{r}
my_movies <- movies_df[movies_df$movie_titles %in% c("Gemide", "Av Mevsimi", "Kaybedenler Kulübü"), ]
my_movies
```

This table leads me to believe that I don't watch movies with ratings higher than eight. :)

**Plots**

*Scatter Plot of Average Ratings of Movies Over the Years*

```{r}
movies_df$movie_years <- as.factor(movies_df$movie_years)

# Calculate yearly rating averages
rating_avg_by_year <- movies_df %>%
  group_by(movie_years) %>%
  summarise(avg_rating = mean(movie_ratings),
            num_movies = n())

# Scatter plot of yearly rating averages with rotated year labels
ggplot(rating_avg_by_year, aes(x = movie_years, y = avg_rating)) +
  geom_point() +
  labs(title = "Scatter Plot of Average Ratings of Turkish Movies Over the Years",
       x = "Year",
       y = "Average Rating") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

*Box Plot of Ratings of Movies Over the Years*

```{r}
ggplot(movies_df, aes(x = movie_years, y = movie_ratings)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 90, hjust=1)) +
  labs(title = "Box Plot of Ratings of Turkish Movies Over the Years",
       x = "Year",
       y = "Rating")
```

*Correlation between Votes and Ratings*

```{r}
ggplot(movies_df, aes(x = movie_votes, y = movie_ratings)) +
  geom_point() +
  labs(title = "Scatter Plot of Votes vs Ratings",
       x = "Number of Votes",
       y = "Ratings")
```

*Numerical Representation of the Above Graph (Correlation)*

```{r}
correlation <- cor(movies_df$movie_votes, movies_df$movie_ratings, use = "complete.obs")

cat("Correlation between Votes and Ratings:", correlation, "\n")

```

*Correlation between Duration and Ratings*

```{r}
correlation_duration_rating <- cor(movies_df$movie_durations, movies_df$movie_ratings, use = "complete.obs")
cat("Correlation between Duration and Ratings:", correlation_duration_rating, "\n")

ggplot(movies_df, aes(x = movie_durations, y = movie_ratings)) +
  geom_point() +
  labs(title = "Scatter Plot of Duration vs Ratings",
       x = "Duration (minutes)",
       y = "Ratings")
```

*Numerical Representation of the Above Graph (Correlation)*

```{r}
correlation_2 <- cor(movies_df$movie_durations, movies_df$movie_ratings, use = "complete.obs")

cat("Correlation between Duration and Ratings:", correlation_2, "\n")
```

*Turkish Movies in IMDb Top 1000*

```{r}
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"

movie_name <- c()
movie_year <- c()

HTML <- read_html(URL_3)

title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))

year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)

movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)

top1000_df <- data.frame(movie_name, movie_year)

top1000_df %>%
  kable() %>%
  kable_styling(full_width = FALSE)
```

*Merging the Dataframe to Expand the other Columns*

```{r}
top1000_df_merged <- merge(
  x = top1000_df,
  y = movies_df,
  by.x = c("movie_name", "movie_year"),
  by.y = c("movie_titles", "movie_years"),
  all.x = TRUE
)

top1000_df_merged %>%
  kable() %>%
  kable_styling(full_width = FALSE)
```

*Ordered by Rankings*

```{r}
top1000_df_merged <- top1000_df_merged[order(top1000_df_merged$movie_ratings, decreasing = TRUE),]

top1000_df_merged %>%
  kable() %>%
  kable_styling(full_width = FALSE)
```

*Movies Dataframe's First 11, by ranking*

```{r}
movies_df %>%
  arrange(desc(movie_ratings)) %>%
  head(11) %>%
  kable(caption = "First 11 Movies Sorted by Rating") %>%
  kable_styling(full_width = FALSE)
```

It is obvious from the fact that no movie appears again in the two dataframes that IMDb considers other factors in addition to ratings when identifying the top 1000 films.

It's also unexpected that the oldest film in the top 1000 was released in 1996 while the best movie_df movies are generally from the 80s.
